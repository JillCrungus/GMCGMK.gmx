<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
window_set_size(1024,768);
window_center();
window_set_cursor(cr_none);

noclip = false;

sensitivity = 0.2; //Mouse sensitivity

max_spd = 1.4; //Maximum speed
acc = 0.1; //Acceleration
dec = 0.2; //Deceleration

fb_vel = 0; //Velocity forwards/back
rl_vel = 0; //Strafing velocity
zvel = 0; //Up/down

jump_height = 4;
increment = 0;

grav = 0.3 //Gravity


//Cool 3D stuff
z = 32;

height = 32;

pitch = 0;

fov = 105

lightRange=170;

alarm[0] = room_speed * 0.7

instance_create(x,y,oCamera);
//instance_create(x,y,oGUI);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var fb_keys = keyboard_check(ord('W')) - keyboard_check(ord('S'));
var rl_keys = keyboard_check(ord('D')) - keyboard_check(ord('A'));


if ( fb_keys == 1 || fb_keys == -1 || rl_keys == 1 || rl_keys == -1 )
{
    audio_sound_pitch(step1, random_range(0.99, 1.05));
    audio_sound_pitch(step2, random_range(0.99, 1.19));
    audio_sound_gain(step1, random_range(0.25,0.30), 0);
    audio_sound_gain(step2, random_range(0.25,0.30), 0);
    audio_play_sound(choose(step1, step2), 0, false);
}



alarm[0] = room_speed * 0.7
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Mouse handling
direction -= sensitivity  * (display_mouse_get_x() - display_get_width() * 0.5); 

pitch += sensitivity  * (display_mouse_get_y() - display_get_height() * 0.5); 

//Clamp pitch
pitch = clamp(pitch, -60, 60)



//Lock mouse (take that unity)
if ( !os_is_paused() ) //Only lock if we're in focus
{
    display_mouse_set(display_get_width() * 0.5, display_get_height() * 0.5) //Lock
}

////Keyboard controls////
var fb_keys = keyboard_check(ord('W')) - keyboard_check(ord('S'));
var rl_keys = keyboard_check(ord('D')) - keyboard_check(ord('A'));


//Movement
fb_vel += fb_keys * acc; 
rl_vel += rl_keys * acc;

//Clamp speeds
fb_vel = clamp(fb_vel, -max_spd, max_spd); 
rl_vel = clamp(rl_vel, -max_spd, max_spd);

//Deceleration
if (fb_keys == 0 &amp;&amp; abs(fb_vel) &gt;= acc)
{
    fb_vel -= sign(fb_vel) * dec;
} 
if (rl_keys == 0 &amp;&amp; abs(rl_vel) &gt;= acc)
{
    rl_vel -= sign(rl_vel) * dec;
} 

//Translate to x and y
var xvel = lengthdir_x(fb_vel, direction) + lengthdir_x(rl_vel, direction - 90);
var yvel = lengthdir_y(fb_vel, direction) + lengthdir_y(rl_vel, direction - 90);


//Z is affected by gravity
if ( !place_meeting_ext(x,y,z, oBaseSolid) &amp;&amp; !noclip )
{
    zvel -= grav;
}

//Jump
if ( place_meeting_ext(x,y,z-1, oBaseSolid)  &amp;&amp; keyboard_check_pressed(vk_space) &amp;&amp; !noclip )
{
    zvel += jump_height;
} 


//Noclip controls
if ( noclip &amp;&amp; keyboard_check(vk_space) )
{
    zvel += jump_height;
}
if ( noclip &amp;&amp; !keyboard_check(vk_space) )
{
    zvel = 0;
}  
if ( noclip &amp;&amp; keyboard_check(vk_control) )
{
    zvel -= jump_height;
}

if ( keyboard_check( vk_left ) )
{
    direction++;
}
if ( keyboard_check( vk_right ) )
{
    direction--;
}

//Actually move
if ( !place_meeting_ext(x + xvel, y, z, oBaseSolid) )
{
    //All clear
    x += xvel;
} else {

    if ( !noclip )
    {
        //Maybe we overshot
        while ( !place_meeting_ext(x + sign(xvel), y, z, oBaseSolid) )
        {
            x+=sign(xvel);
        }
        //Now there's REALLY a solid there
        xvel = 0;
    }
    else
    {
        x += xvel;
    }
}

if ( !place_meeting_ext(x, y + yvel, z, oBaseSolid) )
{
    //All clear
    y += yvel;
} else {

    if ( !noclip )
    {
        while ( !place_meeting_ext(x , y + sign(yvel), z, oBaseSolid) )
        {
            y+=sign(yvel);
        }
        //Now there's REALLY a solid there
        yvel = 0;
    }
    else
    {
        y += yvel;
    }
}


if ( !place_meeting_ext(x, y, z + zvel, oBaseSolid) )
{
    //All clear
    z += zvel;
} else {
    if ( !noclip )
    {
        while ( !place_meeting_ext(x , y, z + sign(zvel), oBaseSolid) )
        {
            z+=sign(zvel);
        }
        //Now there's REALLY a solid there
        zvel = 0;
    }
    else
    {
        z += zvel;
    }
}

////////






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sPlayer, 0, x, y, 1, 1, direction, c_white, 1)
d3d_set_fog(true, c_black, lightRange, 550);
d3d_set_lighting(true);

d3d_light_define_point(1, x, y, z+height, lightRange, c_white);
d3d_light_enable(1,true)




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( noclip == false )
{
    noclip = true;
}
else
{
    noclip = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
